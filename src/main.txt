import os

# Nombre del archivo de salida
output_file = "_Código.txt"

def generate_tree(start_path):
    """Genera una vista tipo árbol desde start_path"""
    tree_lines = []

    for root, dirs, files in os.walk(start_path):
        # Ordenar alfabéticamente
        dirs.sort()
        files.sort()
        level = root.replace(start_path, '').count(os.sep)
        indent = '│   ' * level + '├───' if level > 0 else ''
        dirname = os.path.basename(root) or os.path.abspath(root)
        if level > 0:
            tree_lines.append(f"{indent}{dirname}")
        for f in files:
            if not f.endswith(".css"):
                sub_indent = '│   ' * (level + 1)
                tree_lines.append(f"{sub_indent}{f}")
    return "\n".join(tree_lines)

def process_files(start_path):
    """Lee todos los archivos (excepto .css) y devuelve bloques formateados"""
    code_blocks = []
    for root, dirs, files in os.walk(start_path):
        for file in sorted(files):
            if file.endswith(".css"):
                continue
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, start_path).replace("\\", "/")
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            except Exception as e:
                content = f"// Error al leer el archivo: {e}"

            block = f"### {relative_path}\n'''\n{content}\n'''\n"
            code_blocks.append(block)
    return "\n".join(code_blocks)

def main():
    start_path = os.getcwd()
    tree_output = generate_tree(start_path)
    files_output = process_files(start_path)

    with open(os.path.join(start_path, output_file), 'w', encoding='utf-8') as f:
        f.write(tree_output + "\n\n" + files_output)

    print(f"Archivo '{output_file}' generado correctamente.")

if __name__ == "__main__":
    main()
